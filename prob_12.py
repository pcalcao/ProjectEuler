'''
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

'''


def nth_triangular(n):
	return n*(n+1)/2

import primes_util
			

def factors_of_a_number(n):
	prime_candidates = primes_util.erastot_sieve(int(round(n**0.5)))
	current = int(n)
	factors = {}
	while(current > 1):
		if primes_util.is_prime(current):
			prime = current
			if not current in factors:
				factors[current] =  1
			else:
				factors[current] = factors[current]+1
			break
		for prime in prime_candidates:
			if current % prime == 0: #if the remainder of the division is 0, it's a divisor
				if not prime in factors:
					factors[prime] =  1
				else:
					factors[prime] = factors[prime]+1
				current = current/prime
				break	
	return factors
	
def number_of_multiples(n):
	prime_factors = [x+1 for x in factors_of_a_number(n).values()]
	return reduce(lambda x,y:x*y, prime_factors)

import time

now = time.time()

seed = 2
aux_value = 1
result =0

#Brute force approach...
while result <= 500:
	value = nth_triangular(seed)
	seed += 1
	result = number_of_multiples(value)

print nth_triangular(seed)

print time.time()-now